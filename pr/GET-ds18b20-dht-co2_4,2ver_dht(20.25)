#include <OneWire.h>
// Example testing sketch for various DHT humidity/temperature sensors
// Written by ladyada, public domain

#include "DHT.h"
#include <ESP8266WiFi.h>
  
  const char* ssid = "FLATRON";
  const char* password = "1234567890123";
  const char* host = "95.161.225.76";
   

  bool readytosend=true;
#define DHTPIN D7     

#define DHTTYPE DHT11   

DHT dht(DHTPIN, DHTTYPE);


OneWire ds(D9); 
String tr="20";
int buf[100];
char sum[100];
String sum2="";
void func(int x2)
{
int i,d = 1, k=0, exp2=0; 
int t[30]; 
double x, drob, n, y, z; 
x=x2; 
int cel = (int)x; 
while(cel) 
{ 
t[k] = cel%2; 
k++; 
cel /= 2; 
} 
drob = modf(x, &n); 
int a[23]; 
for(i = 0; i < 23; i++) 
{ 
drob *= 2; 
y = modf(drob, &z); 
a[i] = (int)z; 
if(drob >= 1) 
drob = drob - 1; 
} 
/* 
for(i=0; i<k; i++) 
Serial.print(t[i]); 
*/ 
//---------------------— 
exp2=k-1+127; 
cel = (int)exp2; 
int t2[10], k3=0; 
d=1; 
while(cel) 
{ 
t2[k3]= cel%2; 
k3++; 
cel /= 2; 
} 
int g=0; 
if(x>=0) 
{
  buf[g]=0;
  g++;
}
else 
{
  buf[g]=1; 
  g++;
}
for(i=7; i>=0; i--) { buf[g]=t2[i]; g++; } 
for(i=k-2; i>=0; i--) { buf[g]=t[i]; g++; } 
for(i = 0; i < 24-k; i++) { buf[g]=a[i]; g++; } 

sum2="";
Serial.print("\n\n\n\n\n");
for(i=0; i<32; i++)
{
Serial.print(buf[i]);  

sum[i]=buf[i]+48;
      sum2+=sum[i];

}
Serial.print("\n\n\n\n\n");
}


void setup(void) {
dht.begin();
pinMode(A0, INPUT);  
 Serial.begin(115200);
      delay(10);
      
      
      
      // We start by connecting to a WiFi network
      Serial.println();
      Serial.println();
      Serial.print("Connecting to ");
      Serial.println(ssid);
      
      WiFi.mode(WIFI_STA);
      WiFi.begin(ssid, password);
      
      while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        Serial.print(".");
      }
      Serial.println("");
      Serial.println("WiFi connected");  
      Serial.println("IP address: ");
      Serial.println(WiFi.localIP());

}

void loop(void) {


     
           



  
Serial.println();
byte i;

byte present = 0;

byte type_s;

byte data[12];

byte addr[8];

float celsius, fahrenheit;

if ( !ds.search(addr))
{
float h = dht.readHumidity();
/*
if (isnan(h)) {
    Serial.println("Failed to read from DHT sensor!");
    
  }*/
  Serial.print("\n Humidity: ");
  Serial.print(h);
  Serial.print("%");

    WiFiClient client;
              if (client.connect(host, 80))
              {
                if(tr=="20")
                tr="25";
                else
                tr="20";
                  Serial.println("\nGET humidity start.");
                  client.println("GET /FPGAdev/api/Values/sendDatas?value="+tr+"&type=2&device=3 HTTP/1.1");
                  client.println("Host: 95.161.225.76");
                  client.println("User-Agent: arduino-ethernet");
                  client.println("Connection: close");
                  client.println();
                  Serial.println("GET humidity end.");


                  
                   
                 client.stop();
                  
                  Serial.println("\n[Disconnected]\n\n");
                  
               }
                  
              else
               {
                Serial.println("connection failed!]\n\n");
                client.stop();
                return;
                }
       
    delay(5);

int gaz=analogRead(A0);
  Serial.print("\n Datchik gaza :  ");
  Serial.println(gaz);
  Serial.println();


if(gaz>=0)
{
  sum2="";
  func(gaz);
 WiFiClient client;
              if (client.connect(host, 80))
              {
                
                  Serial.println("\nGET gaz start.");
                  client.println("GET /FPGAdev/api/Values/sendDatas?value="+sum2+"&type=3&device=3 HTTP/1.1");
                  client.println("Host: 95.161.225.76");
                  client.println("User-Agent: arduino-ethernet");
                  client.println("Connection: close");
                  client.println();
                  Serial.println("GET gaz end.");


                   client.stop();
                   sum2="";
                 
                  
                  Serial.println("\n[Disconnected]\n\n");
                  
               }
                  
              else
               {
                Serial.println("connection failed!]\n\n");
                client.stop();
                return;
                }
      
    delay(5);
}
Serial.println("No more addresses.");

Serial.println();

Serial.println();

Serial.println();

ds.reset_search();

delay(250);

return;

}

Serial.print("ROM =");

for( i = 0; i < 8; i++) {

Serial.write(' ');

Serial.print(addr[i], HEX);

}

if (OneWire::crc8(addr, 7) != addr[7]) {

Serial.println("CRC is not valid!");

return;

}

Serial.println();

// первый байт определяет чип

switch (addr[0]) {

case 0x10:

Serial.println(" Chip = DS18S20"); // или более старый DS1820

type_s = 1;

break;

case 0x28:

Serial.println(" Chip = DS18B20");

type_s = 0;

break;

case 0x22:

Serial.println(" Chip = DS1822");

type_s = 0;

break;

default:

Serial.println("Device is not a DS18x20 family device.");

return;

}

ds.reset();

ds.select(addr);

ds.write(0x44); // начинаем преобразование, используя ds.write(0x44,1) с "паразитным" питанием

delay(1000); // 750 может быть достаточно, а может быть и не хватит

// мы могли бы использовать тут ds.depower(), но reset позаботится об этом

present = ds.reset();

ds.select(addr);

ds.write(0xBE);

Serial.print(" Data = ");

Serial.print(present, HEX);

Serial.print(" ");

for ( i = 0; i < 9; i++) { // нам необходимо 9 байт

data[i] = ds.read();

Serial.print(data[i], HEX);

Serial.print(" ");

}

Serial.print(" CRC=");

Serial.print(OneWire::crc8(data, 8), HEX);

Serial.println();

// конвертируем данный в фактическую температуру

// так как результат является 16 битным целым, его надо хранить в

// переменной с типом данных "int16_t", которая всегда равна 16 битам,

// даже если мы проводим компиляцию на 32-х битном процессоре

int16_t raw = (data[1] << 8) | data[0];

if (type_s) {

raw = raw << 3; // разрешение 9 бит по умолчанию

if (data[7] == 0x10) {

raw = (raw & 0xFFF0) + 12 - data[6];

}

} else {

byte cfg = (data[4] & 0x60);

// при маленьких значениях, малые биты не определены, давайте их обнулим

if (cfg == 0x00) raw = raw & ~7; // разрешение 9 бит, 93.75 мс

else if (cfg == 0x20) raw = raw & ~3; // разрешение 10 бит, 187.5 мс

else if (cfg == 0x40) raw = raw & ~1; // разрешение 11 бит, 375 мс

//// разрешение по умолчанию равно 12 бит, время преобразования - 750 мс

}

celsius = (float)raw / 16.0;


Serial.print(" Temperature = ");

Serial.print(celsius);

Serial.print(" Celsius");
func((int)celsius);

   WiFiClient client;
              if (client.connect(host, 80))
              {
                
                  Serial.println("GET temp start.");
                  client.println("GET /FPGAdev/api/Values/sendDatas?value="+sum2+"&type=1&device=3 HTTP/1.1");
                  client.println("Host: 95.161.225.76");
                  client.println("User-Agent: arduino-ethernet");
                  client.println("Connection: close");
                  client.println();
                  Serial.println("GET temp end.");


                   client.stop();
                   
                 
                  
                  Serial.println("\n[Disconnected]\n\n");
                  
               }
                  
              else
               {
                Serial.println("connection failed!]\n\n");
                client.stop();
                return;
                }
      
    delay(5);


}
