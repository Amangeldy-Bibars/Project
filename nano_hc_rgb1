#include <avr/io.h>
#include <avr/interrupt.h>
#include <Wire.h>
#include <SPI.h>
#include <Adafruit_Sensor.h>
#include "Adafruit_BME680.h"
#include <SoftwareSerial.h>
#include <Adafruit_NeoPixel.h>
#ifdef __AVR__
#include <avr/power.h>
#endif
#define PIN            5
#define NUMPIXELS      1
#define BME_SCK 13
#define BME_MISO 12
#define BME_MOSI 11
#define BME_CS 10
#define SEALEVELPRESSURE_HPA (1013.25)

SoftwareSerial pmsSerial(2, 3);
SoftwareSerial BT(7, 8);
Adafruit_NeoPixel pixels = Adafruit_NeoPixel(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800);
Adafruit_BME680 bme(BME_CS, BME_MOSI, BME_MISO,  BME_SCK);

volatile float pm1 = 0.0, pm25 = 0.0, pm10 = 0.0;

float hum_weighting = 0.25; 
float gas_weighting = 0.75; 

float hum_score, gas_score;
float gas_reference = 250000;
float hum_reference = 40;
int   getgasreference_count = 0;

void setup() {
  Serial.begin(115200);
  while (!Serial);
  
  if (!bme.begin()) {
    while (1);
  }

  bme.setTemperatureOversampling(BME680_OS_2X);
  bme.setHumidityOversampling(BME680_OS_2X);
  bme.setPressureOversampling(BME680_OS_2X);
  bme.setIIRFilterSize(BME680_FILTER_SIZE_3);
  bme.setGasHeater(320, 150); 
  GetGasReference();
  BT.begin(9600);
   pixels.begin(); 
  pmsSerial.begin(9600);
  cli();  
  TCCR1A = 0;   
  TCCR1B = 0;

  //OCR1A = 9376; 
  //OCR1A = 15624;
  OCR1A = 7811;
  TCCR1B |= (1 << WGM12);   
  TCCR1B |= (1 << CS10); 
  TCCR1B |= (1 << CS12);

  TIMSK1 |= (1 << OCIE1A);  
  sei(); 
}

struct pms5003data {
  uint16_t framelen;
  uint16_t pm10_standard, pm25_standard, pm100_standard;
  uint16_t pm10_env, pm25_env, pm100_env;
  uint16_t particles_03um, particles_05um, particles_10um, particles_25um, particles_50um, particles_100um;
  uint16_t unused;
  uint16_t checksum;
};

struct pms5003data data;

boolean readPMSdata(Stream *s) {
  if (! s->available()) {
    return false;
  }
  
  if (s->peek() != 0x42) {
    s->read();
    return false;
  }

  if (s->available() < 32) {
    return false;
  }
    
  uint8_t buffer[32];    
  uint16_t sum = 0;
  s->readBytes(buffer, 32);

  for (uint8_t i=0; i<30; i++) {
    sum += buffer[i];
  }

  uint16_t buffer_u16[15];
  for (uint8_t i=0; i<15; i++) {
    buffer_u16[i] = buffer[2 + i*2 + 1];
    buffer_u16[i] += (buffer[2 + i*2] << 8);
  }

  memcpy((void *)&data, (void *)buffer_u16, 30);

  if (sum != data.checksum) {
    return false;
  }
  
  return true;
}

void pmsfunc(){
  if (readPMSdata(&pmsSerial)) {
    /*Serial.println();
    Serial.print("PM1.0="); Serial.print(data.pm10_env);
    Serial.print("\tPM2.5="); Serial.print(data.pm25_env);
    Serial.print("\tPM10="); Serial.println(data.pm100_env);*/
    pm1 = data.pm10_env;
    pm25 = data.pm25_env;
    pm10 = data.pm100_env;
  }
}

void loop() {
  if (! bme.performReading()) {
    return;
  }
  float current_humidity = bme.readHumidity();
  if (current_humidity >= 38 && current_humidity <= 42)
    hum_score = 0.25*100; // Humidity +/-5% around optimum 
  else
  { 
    if (current_humidity < 38) 
      hum_score = 0.25/hum_reference*current_humidity*100;
    else
    {
      hum_score = ((-0.25/(100-hum_reference)*current_humidity)+0.416666)*100;
    }
  }
  
  float gas_lower_limit = 5000;   
  float gas_upper_limit = 50000;  
  if (gas_reference > gas_upper_limit) gas_reference = gas_upper_limit; 
  if (gas_reference < gas_lower_limit) gas_reference = gas_lower_limit;
  gas_score = (0.75/(gas_upper_limit-gas_lower_limit)*gas_reference -(gas_lower_limit*(0.75/(gas_upper_limit-gas_lower_limit))))*100;
  
 float air_quality_score = hum_score + gas_score;
  
  BT.print((String)"{\"T\":" + bme.readTemperature() + ",\"P\":" + (bme.readPressure() / 100.0F) + ",\"H\":" + bme.readHumidity() + ",\"A\":" + bme.readAltitude(SEALEVELPRESSURE_HPA));
  BT.print((String)",\"AQI\":" + CalculateIAQ(air_quality_score) + ",\"PM1.0\":" + pm1 + ",\"PM2.5\":" + pm25 + ",\"PM10\":" + pm10 + "}");
  delay(16000);
}

ISR(TIMER1_COMPA_vect)
{
    pmsfunc();
}

void GetGasReference(){
  int readings = 10;
  for (int i = 1; i <= readings; i++){ 
    gas_reference += bme.readGas();
  }
  gas_reference = gas_reference / readings;
}

int CalculateIAQ(float score){
  score = (100-score)*5;
  if      (score >= 301)
  {
    pixels.setPixelColor(0, pixels.Color(0,0,255)); 
    pixels.show();                 
  }
  else if (score >= 201 && score <= 300 )
  {
    pixels.setPixelColor(0, pixels.Color(128,0,128)); 
    pixels.show();                 
  } 
  else if (score >= 151 && score <= 200 ) 
  {
    pixels.setPixelColor(0, pixels.Color(255,0,0)); 
    pixels.show();                 
  }
  else if (score >= 101 && score <= 150 ) 
  {
    pixels.setPixelColor(0, pixels.Color(255,128,0)); 
    pixels.show();                 
  }
  else if (score >=  51 && score <= 100 ) 
  {
    pixels.setPixelColor(0, pixels.Color(255,255,0)); 
    pixels.show();                 
  }
  else if (score >=  00 && score <=  50 ) 
  {
    pixels.setPixelColor(0, pixels.Color(0,255,0)); 
    pixels.show();                 
  }
  return score;
}
