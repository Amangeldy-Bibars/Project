//BB_AB 050422
//Модуль с Датчиком измеряющий 11 значений загрязнения воздуха
//отправка 2 GET запроса под 2 метода
//SIM800L GET request with Thingspeak
//ESP32


#include <stdlib.h>

#define RXD2 14 //T (TX) pin of AQI device to D14 PIN of ESP32
#define TXD2 27 //R (RX) pin of AQI device to D27 PIN of ESP32

#define RXD3 33
#define TXD3 25

#define EEPROM_SIZE 1
 
const char* ssid     = "WIFI-DEVICE-1";
const char* password = "123456789";
 
String header;
 
String output26State = "IPG";
int output26Statesan = 0;


String send1 = "";

byte send2[10] = {0xFF, 0x01, 0x86, 0x00, 0x00, 0x00, 0x00, 0x00, 0x79};

int res[100];

  double pm1_val = 0;
  double pm25_val = 0;
  double pm10_val = 0;
  double co2_val = 0;
  double voc_val = 0;
  double temp_val = 0;
  double hum_val = 0;
  double ch2o_val = 0;
  double co_val = 0;
  double o3_val = 0;
  double no2_val =0;

unsigned int hexToDec(String hexString) {
  
  unsigned int decValue = 0;
  int nextInt;
  
  for (int i = 0; i < hexString.length(); i++) {
    
    nextInt = int(hexString.charAt(i));
    if (nextInt >= 48 && nextInt <= 57) nextInt = map(nextInt, 48, 57, 0, 9);
    if (nextInt >= 65 && nextInt <= 70) nextInt = map(nextInt, 65, 70, 10, 15);
    if (nextInt >= 97 && nextInt <= 102) nextInt = map(nextInt, 97, 102, 10, 15);
    nextInt = constrain(nextInt, 0, 15);
    
    decValue = (decValue * 16) + nextInt;
  }
  
  return decValue;
}
 

void setup() {

  Serial.begin(115200);
  Serial2.begin(9600, SERIAL_8N1, RXD2, TXD2);
  Serial1.begin(9600, SERIAL_8N1, RXD3, TXD3); 


  delay(1000);

  Serial1.println("AT");
  delay(1000);
 
   Serial1.println("AT+CPIN?");
   
  delay(1000);
    if ( Serial1.available())
    Serial.write( Serial1.read());
 
   Serial1.println("AT+CREG?");
  delay(1000);
    if ( Serial1.available())
    Serial.write( Serial1.read());
 
   Serial1.println("AT+CGATT?");
     if ( Serial1.available())
    Serial.write( Serial1.read());
  delay(1000);
 
   Serial1.println("AT+CIPSHUT");
     if ( Serial1.available())
    Serial.write( Serial1.read());
  delay(1000);
 
   Serial1.println("AT+CIPSTATUS");
     if ( Serial1.available())
    Serial.write( Serial1.read());
  delay(2000);
 
   Serial1.println("AT+CIPMUX=0");
  delay(2000);
 
   Serial1.println("AT+CSTT=\"internet\"");
     if ( Serial1.available())
    Serial.write( Serial1.read());//start task and setting the APN,
  delay(1000);
 
 
   Serial1.println("AT+CIICR");
     if ( Serial1.available())
    Serial.write( Serial1.read());//bring up wireless connection
  delay(3000);
 
  
   Serial1.println("AT+CIFSR");
     if ( Serial1.available())
    Serial.write( Serial1.read());//get local IP adress
  delay(2000);
 
  
   Serial1.println("AT+CIPSPRT=0");
     if ( Serial1.available())
    Serial.write( Serial1.read());
  delay(3000);
}
 
void loop()
{
delay(3000);
//---1---
//datchikten oku boligi
for(int i=0; i<10; i++)
  {
    Serial2.write(send2[i]);  
  }

  for(int i=0; i<27; i++)
  {
    if(Serial2.available())
    {
      res[i] = Serial2.read();
      Serial.print(res[i]);     
      
    }
     
  }
  
  
  pm1_val = hexToDec(String(res[2]))*256+hexToDec(String(res[3]));
  pm25_val = hexToDec(String(res[4]))*256+hexToDec(String(res[5]));
  pm10_val = hexToDec(String(res[6]))*256+hexToDec(String(res[7]));
  co2_val = hexToDec(String(res[8]))*256+hexToDec(String(res[9]));
  voc_val = hexToDec(String(res[10]));
  temp_val = (hexToDec(String(res[11]))*256+hexToDec(String(res[12]))-500)*0.1;
  hum_val = hexToDec(String(res[13]))*256+hexToDec(String(res[14]));
  ch2o_val = (hexToDec(String(res[15]))*256+hexToDec(String(res[16])))*0.001;
  co_val = (hexToDec(String(res[17]))*256+hexToDec(String(res[18])))*0.1;
  o3_val = (hexToDec(String(res[19]))*256+hexToDec(String(res[20])))*0.01;
  no2_val = (hexToDec(String(res[21]))*256+hexToDec(String(res[22])))*0.01;
  
  Serial.print("\n pm1 : ");
  Serial.println(pm1_val);

  Serial.print("pm25 : ");
  Serial.println(pm25_val);

  Serial.print("pm10 : ");
  Serial.println(pm10_val);

  Serial.print("co2 : ");
  Serial.println(co2_val);

  Serial.print("voc : ");
  Serial.println(voc_val);

  Serial.print("temp : ");
  Serial.println(temp_val);

  Serial.print("hum : ");
  Serial.println(hum_val);

  Serial.print("ch2o : ");
  Serial.println(ch2o_val);

  Serial.print("co : ");
  Serial.println(co_val);

  Serial.print("o3 : ");
  Serial.println(o3_val);

  Serial.print("no2 : ");
  Serial.println(no2_val);

//---1---

  //jiberu();
  //jiberu1();

//---2---
//server boligi

  
}


void jiberu()
{
  if ( Serial1.available())
    Serial.write( Serial1.read());
 
  
  
   Serial1.println("AT+CIPSTART=\"TCP\",\"api.thingspeak.com\",\"80\"");//start up the connection
  delay(4000);
    if ( Serial1.available())
    Serial.write( Serial1.read());
 

 
   Serial1.println("AT+CIPSEND");//begin send data to remote server
  delay(100);
 
  
  String str="GET https://api.thingspeak.com/update?api_key=VLSC2AQHLF9O7AV6&field1=" + String(pm1_val) +"&field2="+String(pm25_val)+ "&field3="+String(pm10_val) + "&field4="+String(co2_val) + "&field5="+String(voc_val) + "&field6="+String(temp_val) + "&field7="+String(hum_val)+ "&field8="+String(co_val);
 
  Serial.println(str);
   Serial1.println(str);//begin send data to remote server
  
  delay(4000);
  
 
   Serial1.println((char)26);//sending
  delay(5000);//waitting for reply, important! the time is base on the condition of internet 
   Serial1.println();
 
   Serial1.println("AT+CIPSHUT");//close the connection
  delay(100);
  
}


void jiberu1()
{
  if ( Serial1.available())
    Serial.write( Serial1.read());
 
  
  
   Serial1.println("AT+CIPSTART=\"TCP\",\"api.thingspeak.com\",\"80\"");//start up the connection
  delay(4000);
    if ( Serial1.available())
    Serial.write( Serial1.read());
 

 
   Serial1.println("AT+CIPSEND");//begin send data to remote server
  delay(100);
 
  
  String str1="GET https://api.thingspeak.com/update?api_key=GVQB9RVFGR1JSRMF&field1=" + String(ch2o_val) +"&field2="+String(o3_val)+ "&field3="+String(no2_val);
  Serial.println(str1);
   Serial1.println(str1);//begin send data to remote server
  
  delay(4000);
  
 
   Serial1.println((char)26);//sending
  delay(5000);//waitting for reply, important! the time is base on the condition of internet 
   Serial1.println();
 
   Serial1.println("AT+CIPSHUT");//close the connection
  delay(100);
  
}
